// Code generated by copypasta/template/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"strings"
	"testing"
)

// https://codeforces.com/problemset/problem/1730/E
// https://codeforces.com/problemset/status/1730/problem/E
func Test_cf1730E(t *testing.T) {
	testCases := [][2]string{
		{
			`6
1
1
2
2 4
2
2 3
4
2 4 7 14
7
16 5 18 7 7 12 14
6
16 14 2 6 16 2`,
			`1
3
2
7
10
19`,
		},
		{
			`1
4
2 1 4 2`,
			`10`,
		},
		{
			`1
5
2 1 4 1 2`,
			`15`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf1730E)
}

func TestCompare_cf1730E(_t *testing.T) {
	return
	testutil.DebugTLE = 0

	inputGenerator := func() string {
		//return ``
		rg := testutil.NewRandGenerator()
		rg.One()
		n := rg.Int(1, 30)
		rg.NewLine()
		rg.IntSlice(n, 1, 12)
		return rg.String()
	}

	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		solve := func(Case int) {
			var n ,ans int
			Fscan(in, &n)
			a := make([]int, n)
			for i := range a {
				Fscan(in, &a[i])
			}
			for l, v := range a {
				// 不断向右推
				mn, mx := v, v
				for _, w := range a[l:] {
					mn = min(mn, w)
					mx = max(mx, w)
					if mx%mn == 0 {
						ans++
					}
				}
			}
			Fprintln(out, ans)
		}

		T := 1
		Fscan(in, &T)
		for Case := 1; Case <= T; Case++ {
			solve(Case)
		}

		_leftData, _ := io.ReadAll(in)
		if _s := strings.TrimSpace(string(_leftData)); _s != "" {
			panic("有未读入的数据：\n" + _s)
		}
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf1730E)
}
