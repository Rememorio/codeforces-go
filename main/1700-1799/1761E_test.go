// Code generated by copypasta/template/generator_test.go
package main

import (
	"fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"strings"
	"testing"
)

// https://codeforces.com/problemset/problem/1761/E
// https://codeforces.com/problemset/status/1761/problem/E
func Test_cf1761E(t *testing.T) {
	testCases := [][2]string{
		{
			`4
3
011
100
100
3
000
001
010
4
0100
1000
0001
0010
6
001100
000011
100100
101000
010001
010010`,
			`0
1
1
2
3 4 
3
2 5 6`,
		},
		{
			`1
7
0100000
1000000
0001110
0010100
0011000
0010001
0000010`,
			`1
7`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf1761E)
}

func TestCompare_cf1761E(_t *testing.T) {
	//return
	testutil.DebugTLE = 0

	inputGenerator := func() string {
		//return ``
		rg := testutil.NewRandGenerator()
		rg.One()
		n := rg.Int(10,20)
		rg.NewLine()
		rg.GraphMatrix(n, false)
		return rg.String()
	}

	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		solve := func(Case int) {
			var n int
			fmt.Fscan(in, &n)

			g := make([]string, n)
			deg := make([]int, n)
			for i := range g {
				fmt.Fscan(in, &g[i])
				deg[i] = strings.Count(g[i], "1")
			}

			var comp [][]int
			vis := make([]int, n)

			for i := 0; i < n; i++ {
				if vis[i] == 1 {
					continue
				}

				q := []int{i}
				vis[i] = 1

				for i := 0; i < len(q); i++ {
					x := q[i]

					for y := 0; y < n; y++ {
						if g[x][y] == '1' && vis[y] == 0 {
							q = append(q, y)
							vis[y] = 1
						}
					}
				}

				comp = append(comp, q)
			}

			if len(comp) == 1 {
				fmt.Fprintln(out, 0)
				return
			}

			for _, s := range comp {
				if len(s) == 1 {
					fmt.Fprintln(out, 1)
					//fmt.Fprintln(out, s[0] + 1)
					return
				}
				if deg[s[len(s)-1]] != len(s)-1 {
					fmt.Fprintln(out, 1)
					//fmt.Fprintln(out, s[len(s)-1] + 1)
					return
				}
				for _, x := range s {
					if deg[x] != len(s)-1 {
						fmt.Fprintln(out, 1)
						//fmt.Fprintln(out, x + 1)
						return
					}
				}
			}

			if len(comp) > 2 {
				fmt.Fprintln(out, 2)
				//fmt.Fprintf(out,"%d %d\n", comp[0][0]+1, comp[1][0]+1)
				return
			}

			if len(comp[0]) > len(comp[1]) {
				comp[0], comp[1] = comp[1], comp[0]
			}

			fmt.Fprintln(out, len(comp[0]))
			//for _, x := range comp[0] {
			//	fmt.Printf("%d ", x+1)
			//}
			//fmt.Fprintln(out)
		}

		var T int
		fmt.Fscan(in, &T)
		for Case := 1; Case <= T; Case++ {
			solve(Case)
		}

		_leftData, _ := io.ReadAll(in)
		if _s := strings.TrimSpace(string(_leftData)); _s != "" {
			panic("有未读入的数据：\n" + _s)
		}
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf1761E)
}
