// Code generated by copypasta/template/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"testing"
)

// http://codeforces.com/problemset/problem/916/E
// https://codeforces.com/problemset/status/916/problem/E
func Test_cf916E(t *testing.T) {
	testCases := [][2]string{
		{
			`6 7
1 4 2 8 5 7
1 2
3 1
4 3
4 5
3 6
3 1
2 4 6 3
3 4
1 6
2 2 4 -5
1 4
3 3`,
			`27
19
5`,
		},
		{
			`4 6
4 3 5 6
1 2
2 3
3 4
3 1
1 3
2 2 4 3
1 1
2 2 4 -3
3 1`,
			`18
21`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf916E)
}

func TestCompare_cf916E(_t *testing.T) {
	return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(1, 9)
		q := rg.Int(1, 9)
		rg.NewLine()
		rg.IntSlice(n, -5, 5)
		rg.TreeEdges(n, 1)
		for i := 0; i < q; i++ {
			op := rg.Int(1, 3)
			rg.Int(1, n)
			if op == 2 {
				rg.Int(1, n)
				rg.Int(-5, 5)
			}
			rg.NewLine()
		}
		return rg.String()
	}

	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		var n, q, op, add, rt int
		Fscan(in, &n, &q)
		a := make([]int, n)
		for i := range a {
			Fscan(in, &a[i])
		}
		g := make([][]int, n)
		for i := 1; i < n; i++ {
			var v, w int
			Fscan(in, &v, &w)
			v--
			w--
			g[v] = append(g[v], w)
			g[w] = append(g[w], v)
		}
		for ; q > 0; q-- {
			var v, w int
			Fscan(in, &op, &v)
			v--
			if op == 1 {
				rt = v
			} else if op == 2 {
				Fscan(in, &w, &add)
				w--
				getPath := func(tar int) (path []int) {
					var dfs func(v, fa int) bool
					dfs = func(v, fa int) bool {
						path = append(path, v)
						if v == tar {
							return true
						}
						for _, w := range g[v] {
							if w != fa && dfs(w, v) {
								return true
							}
						}
						path = path[:len(path)-1]
						return false
					}
					dfs(rt, -1)
					return
				}
				p1 := getPath(v)
				p2 := getPath(w)
				lca := rt
				for len(p1) > 0 && len(p2) > 0 && p1[0] == p2[0] {
					lca = p1[0]
					p1 = p1[1:]
					p2 = p2[1:]
				}

				var dfs func(v, fa int, in bool)
				dfs = func(v, fa int, in bool) {
					if !in && v == lca {
						in = true
					}
					if in {
						a[v] += add
					}
					for _, w := range g[v] {
						if w == fa {
							continue
						}
						dfs(w, v, in)
					}
				}
				dfs(rt, -1, false)

			} else {
				tar := v
				res := 0
				var dfs func(v, fa int, in bool)
				dfs = func(v, fa int, in bool) {
					if !in && v == tar {
						in = true
					}
					if in {
						res += a[v]
					}
					for _, w := range g[v] {
						if w == fa {
							continue
						}
						dfs(w, v, in)
					}
				}
				dfs(rt, -1, false)
				Fprintln(out, res)
			}
		}
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf916E)
}
