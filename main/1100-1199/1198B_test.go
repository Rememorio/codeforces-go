// Generated by copypasta/template/generator_test.go
package main

import (
	"fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"testing"
)

// https://codeforces.com/problemset/problem/1198/B
// https://codeforces.com/problemset/status/1198/problem/B
func Test_cf1198B(t *testing.T) {
	testCases := [][2]string{
		{
			`4
1 2 3 4
3
2 3
1 2 2
2 1`,
			`3 2 3 4`,
		},
		{
			`5
3 50 2 1 10
3
1 2 0
2 8
1 3 20`,
			`8 8 20 8 10`,
		},
		{
			`1
0
4
2 5
1 1 0
2 2
2 4`,
			`4`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf1198B)
}

func TestCompare_cf1198B(_t *testing.T) {
	return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(1, 9)
		rg.NewLine()
		rg.IntSlice(n, 0, 5)
		q := rg.Int(1,9)
		rg.NewLine()
		for i := 0; i < q; i++ {
			if rg.Int(1,2) ==1 {
				rg.Int(1,n)
			}
			rg.Int(0,5)
			rg.NewLine()
		}
		return rg.String()
	}

	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		var n int
		fmt.Fscan(in, &n)

		a := make([]int, n)
		for i := range a {
			fmt.Fscan(in, &a[i])
		}

		lastIdx := make([]int, n)
		for i := range lastIdx {
			lastIdx[i] = -1
		}

		var q int
		fmt.Fscan(in, &q)

		events := make([]int, q)
		payouts := make([]int, q)
		for i := range events {
			var op int
			fmt.Fscan(in, &op)
			if op == 1 {
				var p, x int
				fmt.Fscan(in, &p)
				fmt.Fscan(in, &x)
				p--
				lastIdx[p] = i
				a[p] = x
			} else if op == 2 {
				fmt.Fscan(in, &payouts[i])
			} else {
				panic("impossible")
			}
		}

		accPayouts := make([]int, q+1)
		for i := q - 1; i >= 0; i-- {
			accPayouts[i] = max(accPayouts[i+1], payouts[i])
		}

		for i := 0; i < n; i++ {
			li := lastIdx[i]
			fmt.Fprintf(out, "%d ", max(a[i], accPayouts[li+1]))
		}
		fmt.Fprintln(out)
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf1198B)
}
