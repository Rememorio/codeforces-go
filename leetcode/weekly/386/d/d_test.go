// Generated by copypasta/template/leetcode/generator_test.go
package main

import (
	"github.com/EndlessCheng/codeforces-go/leetcode/testutil"
	testutil2 "github.com/EndlessCheng/codeforces-go/main/testutil"
	"testing"
)

func Test_d(t *testing.T) {
	if err := testutil.RunLeetCodeFuncWithFile(t, earliestSecondToMarkIndices, "d.txt", 0); err != nil {
		t.Fatal(err)
	}
}

// https://leetcode.cn/contest/weekly-contest-386/problems/earliest-second-to-mark-indices-ii/
// https://leetcode.cn/problems/earliest-second-to-mark-indices-ii/

func TestCompareInf(_t *testing.T) {
	return
	testutil.DebugTLE = 0
	rg := testutil2.NewRandGenerator()
	inputGenerator := func() (a, d []int) {
		//return
		rg.Clear()
		n := rg.Int(1, 3)
		a = rg.IntSlice(n, 0, 3)
		m := rg.Int(1, 6)
		d = rg.IntSlice(m, 1, n)
		return
	}

	runAC := func(a, d []int) (ans int) {
		ans = 1e9
		a = append(a[:0:0], a...)
		done := make([]bool, len(a))
		var f func(i int)
		f = func(i int) {
			for _, b := range done {
				if !b {
					goto next
				}
			}
			ans = min(ans, i)
			next:
			if i == len(d) {
				return
			}

			f(i + 1)

			for j := range a {
				if a[j] == 0 {
					if !done[j] {
						done[j] = true
						f(i + 1)
						done[j] = false
					}
				} else {
					a[j]--
					f(i + 1)
					a[j]++
				}
			}

			idx := d[i] - 1
			if a[idx] > 0 {
				tmp := a[idx]
				a[idx] = 0
				f(i + 1)
				a[idx] = tmp
			}
		}
		f(0)
		if ans == 1e9 {
			return -1
		}
		return
	}

	//if err := testutil.RunLeetCodeFuncWithFile(_t, runAC, "d.txt", 0); err != nil {
	//	_t.Fatal(err)
	//}
	//return

	testutil.CompareInf(_t, inputGenerator, runAC, earliestSecondToMarkIndices)
}
