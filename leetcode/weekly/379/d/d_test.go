// Code generated by copypasta/template/leetcode/generator_test.go
package main

import (
	"github.com/EndlessCheng/codeforces-go/leetcode/testutil"
	testutil2 "github.com/EndlessCheng/codeforces-go/main/testutil"
	"testing"
)

func Test_d(t *testing.T) {
	if err := testutil.RunLeetCodeFuncWithFile(t, maxPartitionsAfterOperations, "d.txt", 0); err != nil {
		t.Fatal(err)
	}
}

// https://leetcode.cn/contest/weekly-contest-379/problems/maximize-the-number-of-partitions-after-operations/
// https://leetcode.cn/problems/maximize-the-number-of-partitions-after-operations/

func TestCompareInf(_t *testing.T) {
	return
	testutil.DebugTLE = 0

	inputGenerator := func() (s string, k int) {
		//return
		rg := testutil2.NewRandGenerator()
		n := rg.Int(1, 40)
		s = rg.Str(n, n, 'a', 'e')
		k = rg.Int(1, 22)
		return
	}

	runAC := func(s string, k int) (ans int) {
		f := func(s string) {
			res := 0
			for i, n := 0, len(s); i < n; {
				d := 1
				vis := 1 << (s[i] - 'a')
				for i++; i < n; i++ {
					if vis>>(s[i]-'a')&1 == 0 {
						if d == k {
							break
						}
						vis |= 1 << (s[i] - 'a')
						d++
					}
				}
				res++
			}
			ans = max(ans, res)
		}
		f(s)
		for i := 0; i < len(s); i++ {
			t := []byte(s)
			for ch := byte('a'); ch <= 'z'; ch++ {
				t[i] = ch
				f(string(t))
			}
		}
		return
	}

	// test examples first
	//if err := testutil.RunLeetCodeFuncWithFile(_t, runAC, "d.txt", 0); err != nil {
	//	_t.Fatal(err)
	//}
	//return

	testutil.CompareInf(_t, inputGenerator, runAC, maxPartitionsAfterOperationsWA)
}
